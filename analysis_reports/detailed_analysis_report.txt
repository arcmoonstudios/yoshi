═══════════════════════════════════════════════════════════════════════════════
                       🔬 DETAILED FRAMEWORK ANALYSIS REPORT 🔬
                           Advanced Metrics and Insights
═══════════════════════════════════════════════════════════════════════════════

⚡ PERFORMANCE ANALYSIS
─────────────────────────
🎯 eyre:
   Performance Score: 46.83/100
   Avg Execution Time: 1450 ns
   Avg Memory Footprint: 299 bytes
   Efficiency Ratio: 2359.9228

🎯 snafu:
   Performance Score: 45.69/100
   Avg Execution Time: 125 ns
   Avg Memory Footprint: 332 bytes
   Efficiency Ratio: 24637.5940

🎯 thiserror:
   Performance Score: 45.69/100
   Avg Execution Time: 275 ns
   Avg Memory Footprint: 332 bytes
   Efficiency Ratio: 11198.9064

🎯 anyhow:
   Performance Score: 13.00/100
   Avg Execution Time: 3975 ns
   Avg Memory Footprint: 3851 bytes
   Efficiency Ratio: 66.8900

🎯 Yoshi:
   Performance Score: 4.29/100
   Avg Execution Time: 48050 ns
   Avg Memory Footprint: 14695 bytes
   Efficiency Ratio: 1.4503

💾 MEMORY ANALYSIS
─────────────────────
🎯 Yoshi:
   Memory Efficiency: 100.0/100
   Average Usage: 14695 bytes
   Memory Range: 14689 - 14704 bytes
   Consistency Score: 100.0/100

🎯 anyhow:
   Memory Efficiency: 99.8/100
   Average Usage: 3851 bytes
   Memory Range: 3842 - 3858 bytes
   Consistency Score: 99.8/100

🎯 snafu:
   Memory Efficiency: 97.8/100
   Average Usage: 332 bytes
   Memory Range: 325 - 337 bytes
   Consistency Score: 98.6/100

🎯 thiserror:
   Memory Efficiency: 97.8/100
   Average Usage: 332 bytes
   Memory Range: 325 - 337 bytes
   Consistency Score: 98.6/100

🎯 eyre:
   Memory Efficiency: 97.0/100
   Average Usage: 299 bytes
   Memory Range: 290 - 306 bytes
   Consistency Score: 98.1/100

👩‍💻 ERGONOMICS ANALYSIS
─────────────────────────
🎯 Yoshi:
   Developer Experience: 94.4/100
   Ergonomics Score: 95.0/100
   Context Richness: 98.0/100
   Recoverability: 90.0/100
   Learning Curve: 70.0/100 (higher = easier)

🎯 eyre:
   Developer Experience: 70.5/100
   Ergonomics Score: 75.0/100
   Context Richness: 70.0/100
   Recoverability: 65.0/100
   Learning Curve: 80.0/100 (higher = easier)

🎯 snafu:
   Developer Experience: 65.5/100
   Ergonomics Score: 85.0/100
   Context Richness: 55.0/100
   Recoverability: 50.0/100
   Learning Curve: 75.0/100 (higher = easier)

🎯 anyhow:
   Developer Experience: 62.5/100
   Ergonomics Score: 70.0/100
   Context Richness: 60.0/100
   Recoverability: 55.0/100
   Learning Curve: 90.0/100 (higher = easier)

🎯 thiserror:
   Developer Experience: 57.5/100
   Ergonomics Score: 80.0/100
   Context Richness: 45.0/100
   Recoverability: 40.0/100
   Learning Curve: 85.0/100 (higher = easier)

📊 COMPARATIVE ANALYSIS
─────────────────────────
🏆 Overall Winner: Yoshi

🎯 Scenario-Specific Winners:
   Database Connection Failure: Yoshi
   Business Rule Validation: Yoshi
   Network Timeout Recovery: Yoshi
   System Resource Exhaustion: Yoshi

📋 thiserror Analysis:
   ✅ Key Strengths:
      • High memory efficiency for performance-critical applications
      • Simple derive-based error definitions
      • Minimal boilerplate for structured errors
   ❌ Notable Weaknesses:
      • Limited context management capabilities
      • No built-in error suggestions or recovery information
      • Lacks metadata support for complex error scenarios
   🎯 Optimal Use Cases:
      • Library development with simple structured errors
      • Applications with straightforward error types
      • Projects prioritizing minimal dependencies
   📊 Recommendation Score: 54.2/100

📋 anyhow Analysis:
   ✅ Key Strengths:
      • Extremely easy to get started
      • Minimal learning curve
   ❌ Notable Weaknesses:
      • Lacks structured error types
      • No compile-time error type safety
      • Limited error recovery information
      • Minimal context management capabilities
   🎯 Optimal Use Cases:
      • Rapid prototyping and development
      • Simple applications with basic error handling needs
      • Projects with minimal error complexity requirements
   📊 Recommendation Score: 58.2/100

📋 Yoshi Analysis:
   ✅ Key Strengths:
      • Rich metadata support for detailed error context
      • Built-in error suggestions for improved debugging
      • Structured error codes for programmatic handling
      • High memory efficiency for performance-critical applications
      • Strong type safety guarantees at compile time
      • Comprehensive error handling with builder pattern ergonomics
      • Advanced context management with shell objects
      • Production-ready error recovery information
   ❌ Notable Weaknesses:
      • Steeper initial learning curve due to comprehensive feature set
      • Larger dependency footprint compared to minimal solutions
   🎯 Optimal Use Cases:
      • Production applications requiring comprehensive error handling
      • Systems with complex error recovery requirements
      • Applications needing rich error context and debugging information
      • Enterprise-grade software with audit and compliance requirements
   📊 Recommendation Score: 95.3/100

📋 snafu Analysis:
   ✅ Key Strengths:
      • Excellent ergonomics with context selectors
      • Clean separation of error types and context
   ❌ Notable Weaknesses:
      • No built-in metadata or suggestion support
      • Limited error recovery information
      • Context selectors can be verbose for simple cases
   🎯 Optimal Use Cases:
      • Applications requiring structured errors with good ergonomics
      • Systems with moderate error handling complexity
      • Projects that benefit from context selector patterns
   📊 Recommendation Score: 63.0/100

📋 eyre Analysis:
   ✅ Key Strengths:
      • Enhanced error reporting compared to anyhow
      • Customizable error formatting
   ❌ Notable Weaknesses:
      • Dynamic typing reduces compile-time safety
      • No structured error types
      • Limited metadata support
   🎯 Optimal Use Cases:
      • Applications needing flexible error reporting
      • Systems requiring customizable error formatting
      • Projects that benefit from enhanced anyhow capabilities
   📊 Recommendation Score: 64.6/100

