# .cargo/config.toml
#![deny(dead_code)]
#![deny(unsafe_code)]
#![warn(missing_docs)]
#![deny(clippy::todo)]
#![deny(clippy::panic)]
#![warn(clippy::cargo)]
#![warn(clippy::nursery)]
#![warn(clippy::pedantic)]
#![deny(clippy::dbg_macro)]
#![deny(clippy::expect_used)]
#![deny(clippy::unwrap_used)]
#![deny(clippy::unreachable)]
#![deny(clippy::print_stdout)]
#![deny(clippy::unimplemented)]
#![allow(clippy::too_many_lines)]
#![deny(clippy::indexing_slicing)]
#![warn(clippy::missing_errors_doc)]
#![warn(clippy::missing_panics_doc)]
#![warn(clippy::missing_safety_doc)]
#![allow(clippy::struct_excessive_bools)]
#![allow(clippy::module_name_repetitions)]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#![warn(clippy::missing_docs_in_private_items)]
#~=####====A===r===c===M===o===o===n====N===o===t===e====X|0|$>
# This .cargo/config.toml uses `#![...]` pseudo-Rust syntax for **visual structure**,
# **community readability**, and **template parity** with source code attributes.
# These are **NOT** parsed by Cargo. They exist for aesthetic/semantic clarity only.
#~=####====A===r===c===M===o===o===n====S===t===u===d===i===o===s====X|0|$>
#! **Module Classification:** Standard
#! **Complexity Level:** Medium
#! **API Stability:** Stable
#!
#! **Algorithmic Complexity:**
#! - Time Complexity: O(1) for environment variable lookup
#! - Space Complexity: O(1) constant configuration overhead
#! - Concurrency Safety: Thread-safe environment variable access
#!
#! **Performance Characteristics:**
#! - Expected Performance: Instantaneous configuration application
#! - Worst-Case Scenarios: Negligible overhead on cargo operations
#! - Optimization Opportunities: Environment-based conditional execution
# ~=####====A===r===c===M===o===o===n====S===t===u===d===i===o===s====X|0|$>
#! + Environment variable detection for CI/Dev mode dependency upgrades
#!  - CARGO_ARCMOON_UPGRADE: Boolean flag to enable cargo upgrade operations
#!  - Git safety integration with uncommitted change detection
#!  - Performance optimization with parallel job configuration
#!  - Cross-platform compatibility for Windows/Linux/macOS development
# ~=####====A===r===c===M===o===o===n====S===t===u===d===i===o===s====X|0|$>
# **GitHub:** [ArcMoon Studios](https://github.com/arcmoonstudios)
# **Copyright:** (c) 2025 ArcMoon Studios
# **License:** MIT OR Apache-2.0
# **Contact:** LordXyn@proton.me
# **Author:** Lord Xyn

[env]
# ArcMoon Studios CI/Dev Mode Upgrade Flag
# Set to "true" to enable automated dependency upgrades during development
# Usage: CARGO_ARCMOON_UPGRADE=true make check
CARGO_ARCMOON_UPGRADE = { value = "false", force = false, relative = false }

# Performance optimization for parallel builds
# CARGO_BUILD_JOBS = { value = "0", force = false, relative = false }  # 0 = auto-detect CPU cores

# Enhanced error reporting for development
RUST_BACKTRACE = { value = "1", force = false, relative = false }

# Cargo term color for CI environments
CARGO_TERM_COLOR = { value = "always", force = false, relative = false }

[build]
# Parallel compilation optimization
# jobs = 0  # Auto-detect available CPU cores (commented out to avoid error)

# Target directory optimization for Windows
target-dir = "target"

# Incremental compilation for faster development builds
incremental = true

[target.x86_64-pc-windows-msvc]
# Windows-specific optimizations + ArcMoon Studios Global Quality Standards
rustflags = [
    "-C",
    "target-cpu=native",
    "-C",
    "opt-level=3",
    # Suppress warnings from external dependencies
    "--cap-lints",
    "warn",
    # ArcMoon Studios Global Quality Standards - Applied Globally (OCD Length Scaled)
    "-D",
    "dead_code",
    "-D",
    "unsafe_code",
    "-W",
    "missing_docs",
    "-D",
    "clippy::todo",
    "-D",
    "clippy::panic",
    "-W",
    "clippy::pedantic",
    "-D",
    "clippy::dbg_macro",
    "-D",
    "clippy::expect_used",
    "-D",
    "clippy::unwrap_used",
    "-D",
    "clippy::unreachable",
    "-D",
    "clippy::print_stdout",
    "-D",
    "clippy::unimplemented",
    "-D",
    "clippy::indexing_slicing",
    "-W",
    "clippy::missing_errors_doc",
    "-W",
    "clippy::missing_panics_doc",
    "-W",
    "clippy::missing_safety_doc",
    "-W",
    "clippy::missing_docs_in_private_items",
    # Yoshi facade pattern: designed for `use yoshi::*;` - allow wildcard imports
    "-A",
    "clippy::wildcard_imports",
    # ── PERMANENT ARCHITECTURE PROTECTION ─────────────────────────────────────
    # ⚠️ CRITICAL: DO NOT REMOVE - PROTECTS ESSENTIAL ERROR HANDLING ARCHITECTURE
    "-A",
    "clippy::unnecessary_wraps",                  # REQUIRED: Result wrappers essential for error system
    "-A",
    "clippy::needless_pass_by_value",             # REQUIRED: Owned values needed for corrections
    "-A",
    "clippy::single_match_else",                  # REQUIRED: Match patterns clearer than if-let
    "-A",
    "clippy::manual_let_else",                    # REQUIRED: Manual patterns more explicit
    "-A",
    "clippy::match_wildcard_for_single_variants", # REQUIRED: Wildcards intentional
    "-A",
    "clippy::ptr_arg",                            # REQUIRED: Vec parameters needed for strategies
]

[target.x86_64-unknown-linux-gnu]
# Linux-specific optimizations + ArcMoon Studios Global Quality Standards
rustflags = [
    "-C",
    "target-cpu=native",
    "-C",
    "opt-level=3",
    # Suppress warnings from external dependencies
    "--cap-lints",
    "warn",
    # ArcMoon Studios Global Quality Standards - Applied Globally (OCD Length Scaled)
    "-D",
    "dead_code",
    "-D",
    "unsafe_code",
    "-W",
    "missing_docs",
    "-D",
    "clippy::todo",
    "-D",
    "clippy::panic",
    "-W",
    "clippy::pedantic",
    "-D",
    "clippy::dbg_macro",
    "-D",
    "clippy::expect_used",
    "-D",
    "clippy::unwrap_used",
    "-D",
    "clippy::unreachable",
    "-D",
    "clippy::print_stdout",
    "-D",
    "clippy::unimplemented",
    "-D",
    "clippy::indexing_slicing",
    "-W",
    "clippy::missing_errors_doc",
    "-W",
    "clippy::missing_panics_doc",
    "-W",
    "clippy::missing_safety_doc",
    "-W",
    "clippy::missing_docs_in_private_items",
    # Yoshi facade pattern: designed for `use yoshi::*;` - allow wildcard imports
    "-A",
    "clippy::wildcard_imports",
    # ── PERMANENT ARCHITECTURE PROTECTION ─────────────────────────────────────
    # ⚠️ CRITICAL: DO NOT REMOVE - PROTECTS ESSENTIAL ERROR HANDLING ARCHITECTURE
    "-A",
    "clippy::unnecessary_wraps",                  # REQUIRED: Result wrappers essential for error system
    "-A",
    "clippy::needless_pass_by_value",             # REQUIRED: Owned values needed for corrections
    "-A",
    "clippy::single_match_else",                  # REQUIRED: Match patterns clearer than if-let
    "-A",
    "clippy::manual_let_else",                    # REQUIRED: Manual patterns more explicit
    "-A",
    "clippy::match_wildcard_for_single_variants", # REQUIRED: Wildcards intentional
    "-A",
    "clippy::ptr_arg",                            # REQUIRED: Vec parameters needed for strategies
]

[target.x86_64-apple-darwin]
# macOS-specific optimizations + ArcMoon Studios Global Quality Standards
rustflags = [
    "-C",
    "target-cpu=native",
    "-C",
    "opt-level=3",
    # Suppress warnings from external dependencies
    "--cap-lints",
    "warn",
    # ArcMoon Studios Global Quality Standards - Applied Globally (OCD Length Scaled)
    "-D",
    "dead_code",
    "-D",
    "unsafe_code",
    "-W",
    "missing_docs",
    "-D",
    "clippy::todo",
    "-D",
    "clippy::panic",
    "-W",
    "clippy::pedantic",
    "-D",
    "clippy::dbg_macro",
    "-D",
    "clippy::expect_used",
    "-D",
    "clippy::unwrap_used",
    "-D",
    "clippy::unreachable",
    "-D",
    "clippy::print_stdout",
    "-D",
    "clippy::unimplemented",
    "-D",
    "clippy::indexing_slicing",
    "-W",
    "clippy::missing_errors_doc",
    "-W",
    "clippy::missing_panics_doc",
    "-W",
    "clippy::missing_safety_doc",
    "-W",
    "clippy::missing_docs_in_private_items",
    # Yoshi facade pattern: designed for `use yoshi::*;` - allow wildcard imports
    "-A",
    "clippy::wildcard_imports",
    # ── PERMANENT ARCHITECTURE PROTECTION ─────────────────────────────────────
    # ⚠️ CRITICAL: DO NOT REMOVE - PROTECTS ESSENTIAL ERROR HANDLING ARCHITECTURE
    "-A",
    "clippy::unnecessary_wraps",                  # REQUIRED: Result wrappers essential for error system
    "-A",
    "clippy::needless_pass_by_value",             # REQUIRED: Owned values needed for corrections
    "-A",
    "clippy::single_match_else",                  # REQUIRED: Match patterns clearer than if-let
    "-A",
    "clippy::manual_let_else",                    # REQUIRED: Manual patterns more explicit
    "-A",
    "clippy::match_wildcard_for_single_variants", # REQUIRED: Wildcards intentional
    "-A",
    "clippy::ptr_arg",                            # REQUIRED: Vec parameters needed for strategies
]

[cargo-new]
# Default template for new projects
name = "ArcMoon Studios"
email = "LordXyn@proton.me"
vcs = "git"

[registry]
# Secure registry configuration
default = "crates-io"

[registry.crates-io]
protocol = "sparse"

[net]
# Network optimization
retry = 3
offline = false

#~=####====A===r===c===M===o===o===n====S===i===g===n====X|0|$>
# Config UID: YOSHI-AMS-CONFIG-TOML
# Version: 0.1.6
# Last Updated: 2025-06-11
# Authored By: Lord Xyn, ArcMoon Studios
#~=####====A===r===c===M===o===o===n====S===t===u===d===i===o===s====X|0|$>
